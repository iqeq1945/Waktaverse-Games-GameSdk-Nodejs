import type {RequestInstance} from '../common/request';
import type {operations, paths} from '../types/api'; // generated by openapi-typescript

/**
 * 게임 연동 API
 *
 * @description 게임 연동과 관련된 API 기능을 제공합니다.
 */
export const gameLink = (
  _request: RequestInstance
): {
  getProfile: (Authorization: string) => ReturnType<typeof _request.GET>;
  getAchieves: (Authorization: string) => ReturnType<typeof _request.GET>;

  postAchieve: (
    query: operations['GameLinkController_postAchieve']['parameters']['query'],
    Authorization: string
  ) => ReturnType<typeof _request.POST>;

  getStat: (
    query: operations['GameLinkController_getStat']['parameters']['query'],
    Authorization: string
  ) => ReturnType<typeof _request.GET>;

  putStat: (
    body: operations['GameLinkController_putStat']['requestBody']['content']['application/json'],
    Authorization: string
  ) => ReturnType<typeof _request.PUT>;

  getStatBoard: (
    query: operations['GameLinkController_getStatBoard']['parameters']['query'],
    Authorization: string
  ) => ReturnType<typeof _request.GET>;
} => {
  return {
    /**
     * 사용자 프로필 정보
     * @description 연동된 게임에서 사용자 기본 정보를 얻습니다.
     *
     * @param {string} Authorization - JWT Refresh 토큰 값입니다. 이미 Bearer가 Prefix로 붙어있어, 토큰값을 바로 넣으시면 됩니다.
     */
    getProfile: (Authorization: string) => {
      return _request.GET('/api/game-link/user/profile', {
        headers: {
          Authorization: `Bearer ${Authorization}`,
        },
      });
    },

    /**
     * 도전과제 달성 목록
     * @description 사용자가 달성한 게임 도전과제 목록을 얻습니다.
     */
    getAchieves: (Authorization: string) => {
      return _request.GET('/api/game-link/achieve', {
        headers: {
          Authorization: `Bearer ${Authorization}`,
        },
      });
    },

    /**
     * 도전과제 달성
     * @description 사용자가 게임의 해당 도전과제를 달성했다고 기록합니다.
     */
    postAchieve: (
      query: paths['/api/game-link/achieve']['post']['parameters']['query'],
      Authorization: string
    ) => {
      return _request.POST('/api/game-link/achieve', {
        params: {query},
        headers: {
          Authorization: `Bearer ${Authorization}`,
        },
      });
    },

    /**
     * 통계 목록
     * @description 사용자의 누적 통계 값들을 얻습니다.
     */
    getStat: (
      query: paths['/api/game-link/stat']['get']['parameters']['query'],
      Authorization: string
    ) => {
      return _request.GET('/api/game-link/stat', {
        params: {query},
        headers: {
          Authorization: `Bearer ${Authorization}`,
        },
      });
    },

    /**
     * 통계 입력
     * @description 사용자의 대상 통계 값을 입력합니다.
     */
    putStat: (
      body: paths['/api/game-link/stat']['put']['requestBody']['content']['application/json'],
      Authorization: string
    ) => {
      return _request.PUT('/api/game-link/stat', {
        body,
        headers: {
          Authorization: `Bearer ${Authorization}`,
        },
      });
    },

    /**
     * 전체 사용자 통계
     * @description 대상 통계의 전체 사용자 값을 조회합니다.
     */
    getStatBoard: (
      query: paths['/api/game-link/stat-board']['get']['parameters']['query'],
      Authorization: string
    ) => {
      return _request.GET('/api/game-link/stat-board', {
        params: {query},
        headers: {
          Authorization: `Bearer ${Authorization}`,
        },
      });
    },
  };
};
